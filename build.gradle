/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.8.1/userguide/java_library_plugin.html
 */

plugins
{
   // Apply the java-library plugin to add support for Java Library
	id 'java-library'
	
	// gradle-docker plugins
	id 'com.palantir.docker' version '0.21.0'
	id 'com.palantir.docker-run' version '0.21.0'

	// gradle-helm-plugin plugins
	id 'org.unbroken-dome.helm' version '0.3.0'
	id 'org.unbroken-dome.helm-releases' version '0.3.0'
	
	// gradle-jgitver-plugin pluin
//	id 'fr.brouillard.oss.gradle.jgitver' version '0.8.0'
	
	// gradle-git-version plugin
	id 'com.palantir.git-version' version '0.11.0'
}

dependencies
{
	// Use JUnit test framework
	testImplementation 'junit:junit:4.12'

	// Jersey
	implementation 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.27'
	implementation 'org.glassfish.jersey.inject:jersey-hk2:2.27'
}

// In this section you declare where to find the dependencies of your project
repositories
{
	// Use jcenter for resolving your dependencies.
	// You can declare any Maven/Ivy/file repository here.
	jcenter()
}

// Adding some properties
ext {
	serviceName = "demo4echo"	// For DockerHub registry
	productName = "echofe"		// e.g. apigw (one of the microservices of the admin portal)
	productRepository = "${serviceName}/${productName}"
//	productVersion = "v0.1.0-feature1"
//	productVersion = gitVersion()
	productVersion = manifestVersion()
	productInternalPort = "9999"
	productExternalPort = "30999"
	productK8ShelmChartsFolder = "k8s/helm/charts"
}

// Create an uber jar
jar {
	manifest	{
   	attributes "Main-Class": "com.efrat.example.devops.echoServerFEApp.EchoServerFEApp"
	}

	from	{
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

// Make prints in tests visible
test {
	testLogging {
		outputs.upToDateWhen {false}
		showStandardStreams = true
		systemProperties = System.properties
	}
}

//
// docker
//

docker {
	name "${productName}:${productVersion}"
	tag "privateRegistry", "${productRepository}:${productVersion}"	// For DockerHub registry
	buildArgs([JAR_PRODUCT_NAME:"${project.name}",JAR_PRODUCT_VERSION:"${productVersion}",PRODUCT_INTERNAL_PORT:"${productInternalPort}"])
	files jar.outputs
	copySpec.into("build/libs")
//	pull true
//	noCache true
}

// Give an alias to docker task
task dockerBuild(dependsOn: ['jar','docker'])

dockerRun {
	name "${productName}"
	image "${productName}:${productVersion}"
	ports "${productExternalPort}:${productInternalPort}"
	env 'INTERNAL_PORT_ENV_VAR':"${productInternalPort}"
	daemonize true
	clean true
}

// Main task used from docker plugins
task dockerBuildAndPublish(dependsOn: 'dockerPushPrivateRegistry')

// Give an alias to dockerRun task
task dockerStart(dependsOn: ['dockerBuild','dockerRun'])

//
// helm
//

helm {
	home = file("$System.env.HOME/.helm")
	debug = true

	filtering {
		// These values will be resolvable in all charts' YAML files (e.g. imageTag => ${productVersion})
		values.put 'imageTag',"${productVersion}"
		values.put 'imageRepository',"${productRepository}"
		values.put 'servicePort',"${productInternalPort}"
		values.put 'serviceTargetPort',"${productInternalPort}"
		values.put 'serviceNodePort',"${productExternalPort}"
	}

	charts {
		echofe {
			chartVersion = "${productVersion}"
			sourceDir = file("${productK8ShelmChartsFolder}/${productName}")
		}
	}

	lint {
		// enable/disable linting by default
		enabled = true
		// treat linter warnings as errors (failing the build)
		strict = true
	}

	releases {
		echofe {
			from charts.echofe
			purge = true
			
			// If true, perform a dry run 
//			dryRun = true
			
			// pass values (like --set on the command line)
//			values = ['image.tag':"${productVersion}"]

			// If true, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment are in a ready state before marking the release as successful
//			wait = true
		}
	}
}

task helmUpdate(dependsOn: 'helmInstall')
task helmUninstall(dependsOn: 'helmDelete')

task helmTest(type:Exec) {
	executable "helm"
	args "test","${productName}"
}

task helmTestAndClean(type:Exec) {
	executable "helm"
	args "test","${productName}","--cleanup"
}

// Notes:
// 1. helmPackge and helmInstall tasks are used as is
// 2. helmInstall and helmUninstall (helmDelete) can be used with "-Phelm.dryRun"

//
// The function builds a proper version name
//
def manifestVersion() {
	def details = versionDetails()

	// This doesn't work under Jenkins as it doesn't fetch the tags
//	return "${details.lastTag}.${details.branchName}"
	
	// An alternative (can also be "v0.1.0-demo.${details.branchName}")
	return "v0.1.0-${details.branchName}"

//	println "last tag is: ${details.lastTag}"
//	println "commitDistance is: ${details.commitDistance}"
//	println "gitHash is: ${details.gitHash}"
//	println "gitHashFull is: ${details.gitHashFull}" // full 40-character Git commit hash
//	println "branchName is: ${details.branchName}" // is null if the repository in detached HEAD mode
//	println "isCleanTag is: ${details.isCleanTag}"	
}

description = 'The Echo Frontend demo product'
version = "${productVersion}"
