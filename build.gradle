/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.8.1/userguide/java_library_plugin.html
 */

plugins
{
   // Apply the java-library plugin to add support for Java Library
	id 'java-library'
	
	// gradle-docker plugins
	id 'com.palantir.docker' version '0.21.0'
	id 'com.palantir.docker-run' version '0.21.0'

	// gradle-helm-plugin plugins
	id 'org.unbroken-dome.helm' version '0.3.0'
	id 'org.unbroken-dome.helm-releases' version '0.3.0'
//	id 'org.unbroken-dome.helm-commands' version '0.3.0'
//	id 'org.unbroken-dome.helm-publish' version '0.3.0'
}

dependencies
{
	// This dependency is exported to consumers, that is to say found on their compile classpath.
//	api 'org.apache.commons:commons-math3:3.6.1'

	// This dependency is used internally, and not exposed to consumers on their own compile classpath.
//	implementation 'com.google.guava:guava:23.0'

	// Use JUnit test framework
	testImplementation 'junit:junit:4.12'

	// Jersey
	implementation 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.27'
	implementation 'org.glassfish.jersey.inject:jersey-hk2:2.27'
}

// In this section you declare where to find the dependencies of your project
repositories
{
	// Use jcenter for resolving your dependencies.
	// You can declare any Maven/Ivy/file repository here.
	jcenter()
}

// Adding some properties
ext {
//	serviceName = "demo-echo" 	// e.g. ucass-ap (for Nexus registry)
	serviceName = "tmeltser"	// For DockerHub registry
	productName = "echofe"		// e.g. apigw (one of the microservices of the admin portal)
	productVersion = "1.0"
	productK8SmanifestsFolder = "k8s/manifests"
	productK8SsetupFile = "echofeManifest.yaml"
	productK8ShelmChartsFolder = "k8s/helm/charts"
}

// Create an uber jar
jar {
	manifest
	{
   	attributes "Main-Class": "com.efrat.example.devops.echoServerFEApp.EchoServerFEApp"
	}

	from
	{
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

//
// docker
//

docker {
	name "${productName}:${productVersion}"
//	tag "privateRegistry", "il-tlv-tmeltse4:18081/${serviceName}/${productName}:${productVersion}"
	tag "privateRegistry", "${serviceName}/${productName}:${productVersion}"	// For DockerHub registry
	files jar.outputs
	copySpec.into("build/libs")
}

// Give an alias to docker task
task dockerBuild(dependsOn: ['jar','docker'])

dockerRun {
	name "${productName}"
	image "${productName}:${productVersion}"
	ports '30999:9999'
	daemonize true
	clean true
}

task dockerBuildAndPublish(dependsOn: 'dockerPushPrivateRegistry')

// Give an alias to dockerRun task
task dockerStart(dependsOn: ['dockerBuild','dockerRun'])

//
// kubectl
//

task k8sDeploy(type:Exec) {
//	dependsOn 'k8sBuild'
	
	executable "kubectl"
	args "create","-f","${productK8SmanifestsFolder}/${productK8SsetupFile}"
}

task k8sUndeploy(type:Exec) {
	executable "kubectl"
	args "delete","-f","${productK8SmanifestsFolder}/${productK8SsetupFile}"
}

//
// helm
//

helm {
//	home = file("$buildDir/helm/home")
	home = file("$System.env.HOME/.helm")
	debug = true

	charts {
		echofe {
//			chartName = 'foo'
//			chartVersion = '1.2.3'
			sourceDir = file("${productK8ShelmChartsFolder}/${productName}")
		}
	}

	lint {
		// enable/disable linting by default
		enabled = true
		// treat linter warnings as errors (failing the build)
		strict = true
	}

	releases {
		echofe {
			from charts.echofe
//			from chart("${productName}")
			purge = true
		}
	}
}

task helmBuild(dependsOn: 'k8sBuild')

task helmUninstall(dependsOn: 'helmDelete')

// Notes:
// 1. helmPackge and helmInstall tasks are used as is
// 2. helmInstall and helmUninstall (helmDelete) can be used with "-Phelm.dryRun"

description = 'A trivial Gradle build'
version = '1.0'
